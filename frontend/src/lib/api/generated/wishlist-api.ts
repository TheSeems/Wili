/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/wishlists": {
    /** List wishlists of the authenticated user */
    get: {
      responses: {
        /** @description Array of wishlists belonging to authenticated user */
        200: {
          content: {
            "application/json": components["schemas"]["Wishlist"][];
          };
        };
        /** @description Missing or invalid JWT */
        401: {
          content: never;
        };
      };
    };
    /** Create a new wishlist for the authenticated user */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateWishlistRequest"];
        };
      };
      responses: {
        /** @description Wishlist created */
        201: {
          content: {
            "application/json": components["schemas"]["Wishlist"];
          };
        };
        /** @description Invalid input or validation error */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationErrorResponse"];
          };
        };
        /** @description Missing or invalid JWT */
        401: {
          content: never;
        };
      };
    };
  };
  "/wishlists/{wishlistId}": {
    /** Get a wishlist by ID (public endpoint) */
    get: {
      parameters: {
        path: {
          wishlistId: string;
        };
      };
      responses: {
        /** @description Wishlist details */
        200: {
          content: {
            "application/json": components["schemas"]["Wishlist"];
          };
        };
        /** @description Wishlist not found */
        404: {
          content: never;
        };
      };
    };
    /** Update a wishlist (owner only) */
    put: {
      parameters: {
        path: {
          wishlistId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateWishlistRequest"];
        };
      };
      responses: {
        /** @description Wishlist updated */
        200: {
          content: {
            "application/json": components["schemas"]["Wishlist"];
          };
        };
        /** @description Invalid input or validation error */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationErrorResponse"];
          };
        };
        /** @description Unauthorized or ownership mismatch */
        401: {
          content: never;
        };
        /** @description Wishlist not found */
        404: {
          content: never;
        };
      };
    };
    /** Delete a wishlist (owner only) */
    delete: {
      parameters: {
        path: {
          wishlistId: string;
        };
      };
      responses: {
        /** @description Wishlist deleted */
        204: {
          content: never;
        };
        /** @description Unauthorized or ownership mismatch */
        401: {
          content: never;
        };
        /** @description Wishlist not found */
        404: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        wishlistId: string;
      };
    };
  };
  "/wishlists/{wishlistId}/items": {
    /** Add an item to a wishlist (owner only) */
    post: {
      parameters: {
        path: {
          wishlistId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateWishlistItemRequest"];
        };
      };
      responses: {
        /** @description Item created */
        201: {
          content: {
            "application/json": components["schemas"]["WishlistItem"];
          };
        };
        /** @description Invalid input or validation error */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationErrorResponse"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Wishlist not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/wishlists/{wishlistId}/items/{itemId}": {
    /** Update a wishlist item (owner only) */
    put: {
      parameters: {
        path: {
          wishlistId: string;
          itemId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateWishlistItemRequest"];
        };
      };
      responses: {
        /** @description Updated item */
        200: {
          content: {
            "application/json": components["schemas"]["WishlistItem"];
          };
        };
        /** @description Invalid input or validation error */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationErrorResponse"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Item not found */
        404: {
          content: never;
        };
      };
    };
    /** Remove an item from a wishlist (owner only) */
    delete: {
      parameters: {
        path: {
          wishlistId: string;
          itemId: string;
        };
      };
      responses: {
        /** @description Item deleted */
        204: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Item not found */
        404: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        wishlistId: string;
        itemId: string;
      };
    };
  };
  "/wishlists/{wishlistId}/items/{itemId}/book": {
    /**
     * Book a wishlist item (public endpoint)
     * @description Book a wishlist item. This endpoint is public and allows anonymous users
     * to book items by providing a custom name or booking anonymously.
     */
    post: {
      parameters: {
        path: {
          wishlistId: string;
          itemId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["BookItemRequest"];
        };
      };
      responses: {
        /** @description Item booked successfully */
        200: {
          content: {
            "application/json": components["schemas"]["BookItemResponse"];
          };
        };
        /** @description Invalid input or validation error */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationErrorResponse"];
          };
        };
        /** @description Wishlist or item not found */
        404: {
          content: never;
        };
        /** @description Item is already booked */
        409: {
          content: {
            "application/json": components["schemas"]["ConflictErrorResponse"];
          };
        };
      };
    };
  };
  "/wishlists/{wishlistId}/items/{itemId}/unbook": {
    /**
     * Unbook a wishlist item
     * @description Remove a booking from a wishlist item.
     * - Wishlist owner can unbook any item by providing bookingId (requires auth)
     * - Booker can unbook their own booking by providing cancellationToken (no auth required)
     */
    delete: {
      parameters: {
        query?: {
          /** @description ID of the booking to unbook (for wishlist owner) */
          bookingId?: string;
          /** @description Cancellation token received when booking (for booker) */
          cancellationToken?: string;
        };
        path: {
          wishlistId: string;
          itemId: string;
        };
      };
      responses: {
        /** @description Item unbooked successfully */
        204: {
          content: never;
        };
        /** @description Invalid request - must provide either bookingId or cancellationToken */
        400: {
          content: never;
        };
        /** @description Not authorized to unbook this item */
        403: {
          content: never;
        };
        /** @description Wishlist, item, or booking not found */
        404: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Wishlist: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      userId: string;
      title: string;
      description?: string | null;
      items: components["schemas"]["WishlistItem"][];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CreateWishlistRequest: {
      /** @description Wishlist title */
      title: string;
      /** @description Optional wishlist description */
      description?: string | null;
    };
    UpdateWishlistRequest: {
      /** @description Updated wishlist title */
      title?: string;
      /** @description Updated wishlist description */
      description?: string | null;
    };
    WishlistItem: {
      /** Format: uuid */
      id: string;
      /** @description Discriminator for item type (e.g., "text", "marketplace") */
      type: string;
      data: components["schemas"]["WishlistItemData"];
      /** @description Current booking information for this item (null if not booked) */
      booking?: components["schemas"]["ItemBooking"];
      /** Format: date-time */
      createdAt?: string;
      /** Format: date-time */
      updatedAt?: string;
    };
    CreateWishlistItemRequest: {
      /** @description Item type discriminator */
      type: string;
      data: components["schemas"]["WishlistItemData"];
    };
    /**
     * @description Item-specific data payload. All items must have a name.
     * Description and other properties are optional to support different item types
     * (e.g., marketplace items with SKU, price, etc.).
     */
    WishlistItemData: {
      /** @description Name of the wishlist item */
      name: string;
      /** @description Optional description of the wishlist item */
      description?: string;
      /**
       * Format: uri
       * @description Optional URL associated with the item
       */
      url?: string;
      [key: string]: unknown;
    };
    UpdateWishlistItemRequest: {
      /** @description Updated item type discriminator */
      type?: string;
      data?: components["schemas"]["WishlistItemData"];
    };
    ValidationErrorResponse: {
      /** @description General error message */
      error: string;
      /** @description Detailed validation errors */
      details: components["schemas"]["ValidationError"][];
    };
    ValidationError: {
      /** @description Name of the field that failed validation */
      field: string;
      /** @description Detailed error message for the field */
      message: string;
    };
    BookItemRequest: {
      /** @description Optional name of the person booking the item. If not provided, booking will be anonymous. */
      bookerName?: string;
      /** @description Optional message from the booker to the wishlist owner. */
      message?: string;
    };
    ConflictErrorResponse: {
      /** @description Error type */
      error: string;
      /** @description Detailed error message */
      message: string;
    };
    ItemBooking: {
      /**
       * Format: uuid
       * @description Unique identifier for this booking
       */
      bookingId: string;
      /**
       * Format: date-time
       * @description When the item was booked
       */
      bookedAt: string;
      /** @description Name of the person who booked the item (null for anonymous bookings) */
      bookerName: string | null;
      /** @description Optional message from the booker */
      message?: string | null;
    };
    BookItemResponse: {
      /**
       * Format: uuid
       * @description Unique identifier for this booking
       */
      bookingId: string;
      /**
       * Format: date-time
       * @description When the item was booked
       */
      bookedAt: string;
      /** @description Name of the person who booked the item (null for anonymous bookings) */
      bookerName: string | null;
      /** @description Optional message from the booker */
      message?: string | null;
      /**
       * Format: uuid
       * @description Secret token that allows the booker to cancel their booking. Store this securely!
       */
      cancellationToken: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
