/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/wishlists": {
    /** List wishlists of the authenticated user */
    get: {
      responses: {
        /** @description Array of wishlists belonging to authenticated user */
        200: {
          content: {
            "application/json": components["schemas"]["Wishlist"][];
          };
        };
        /** @description Missing or invalid JWT */
        401: {
          content: never;
        };
      };
    };
    /** Create a new wishlist for the authenticated user */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateWishlistRequest"];
        };
      };
      responses: {
        /** @description Wishlist created */
        201: {
          content: {
            "application/json": components["schemas"]["Wishlist"];
          };
        };
        /** @description Invalid input or validation error */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationErrorResponse"];
          };
        };
        /** @description Missing or invalid JWT */
        401: {
          content: never;
        };
      };
    };
  };
  "/wishlists/{wishlistId}": {
    /** Get a wishlist by ID (public endpoint) */
    get: {
      parameters: {
        path: {
          wishlistId: string;
        };
      };
      responses: {
        /** @description Wishlist details */
        200: {
          content: {
            "application/json": components["schemas"]["Wishlist"];
          };
        };
        /** @description Wishlist not found */
        404: {
          content: never;
        };
      };
    };
    /** Update a wishlist (owner only) */
    put: {
      parameters: {
        path: {
          wishlistId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateWishlistRequest"];
        };
      };
      responses: {
        /** @description Wishlist updated */
        200: {
          content: {
            "application/json": components["schemas"]["Wishlist"];
          };
        };
        /** @description Invalid input or validation error */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationErrorResponse"];
          };
        };
        /** @description Unauthorized or ownership mismatch */
        401: {
          content: never;
        };
        /** @description Wishlist not found */
        404: {
          content: never;
        };
      };
    };
    /** Delete a wishlist (owner only) */
    delete: {
      parameters: {
        path: {
          wishlistId: string;
        };
      };
      responses: {
        /** @description Wishlist deleted */
        204: {
          content: never;
        };
        /** @description Unauthorized or ownership mismatch */
        401: {
          content: never;
        };
        /** @description Wishlist not found */
        404: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        wishlistId: string;
      };
    };
  };
  "/wishlists/{wishlistId}/items": {
    /** Add an item to a wishlist (owner only) */
    post: {
      parameters: {
        path: {
          wishlistId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["CreateWishlistItemRequest"];
        };
      };
      responses: {
        /** @description Item created */
        201: {
          content: {
            "application/json": components["schemas"]["WishlistItem"];
          };
        };
        /** @description Invalid input or validation error */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationErrorResponse"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Wishlist not found */
        404: {
          content: never;
        };
      };
    };
  };
  "/wishlists/{wishlistId}/items/{itemId}": {
    /** Update a wishlist item (owner only) */
    put: {
      parameters: {
        path: {
          wishlistId: string;
          itemId: string;
        };
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateWishlistItemRequest"];
        };
      };
      responses: {
        /** @description Updated item */
        200: {
          content: {
            "application/json": components["schemas"]["WishlistItem"];
          };
        };
        /** @description Invalid input or validation error */
        400: {
          content: {
            "application/json": components["schemas"]["ValidationErrorResponse"];
          };
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Item not found */
        404: {
          content: never;
        };
      };
    };
    /** Remove an item from a wishlist (owner only) */
    delete: {
      parameters: {
        path: {
          wishlistId: string;
          itemId: string;
        };
      };
      responses: {
        /** @description Item deleted */
        204: {
          content: never;
        };
        /** @description Unauthorized */
        401: {
          content: never;
        };
        /** @description Item not found */
        404: {
          content: never;
        };
      };
    };
    parameters: {
      path: {
        wishlistId: string;
        itemId: string;
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Wishlist: {
      /** Format: uuid */
      id: string;
      /** Format: uuid */
      userId: string;
      title: string;
      description?: string | null;
      items: components["schemas"]["WishlistItem"][];
      /** Format: date-time */
      createdAt: string;
      /** Format: date-time */
      updatedAt: string;
    };
    CreateWishlistRequest: {
      /** @description Wishlist title */
      title: string;
      /** @description Optional wishlist description */
      description?: string | null;
    };
    UpdateWishlistRequest: {
      /** @description Updated wishlist title */
      title?: string;
      /** @description Updated wishlist description */
      description?: string | null;
    };
    WishlistItem: {
      /** Format: uuid */
      id: string;
      /** @description Discriminator for item type (e.g., "text", "marketplace") */
      type: string;
      /** Format: date-time */
      data: components["schemas"]["WishlistItemData"];
    };
    CreateWishlistItemRequest: {
      /** @description Item type discriminator */
      type: string;
      data: components["schemas"]["WishlistItemData"];
    };
    /**
     * @description Item-specific data payload. All items must have a name.
     * Description and other properties are optional to support different item types
     * (e.g., marketplace items with SKU, price, etc.).
     */
    WishlistItemData: {
      /** @description Name of the wishlist item */
      name: string;
      /** @description Optional description of the wishlist item */
      description?: string;
      /**
       * Format: uri
       * @description Optional URL associated with the item
       */
      url?: string;
      [key: string]: unknown;
    };
    UpdateWishlistItemRequest: {
      /** @description Updated item type discriminator */
      type?: string;
      data?: components["schemas"]["WishlistItemData"];
    };
    ValidationErrorResponse: {
      /** @description General error message */
      error: string;
      /** @description Detailed validation errors */
      details: components["schemas"]["ValidationError"][];
    };
    ValidationError: {
      /** @description Name of the field that failed validation */
      field: string;
      /** @description Detailed error message for the field */
      message: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
