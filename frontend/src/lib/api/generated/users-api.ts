/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/auth/yandex": {
    /**
     * Authenticate a user via Yandex ID OAuth code
     * @description Exchanges Yandex OAuth `code` for a JWT access token recognised by Wili services.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["YandexAuthRequest"];
        };
      };
      responses: {
        /** @description Successful authentication */
        200: {
          content: {
            "application/json": components["schemas"]["AuthResponse"];
          };
        };
        /** @description Invalid request or code */
        400: {
          content: never;
        };
        /** @description Authentication failed */
        401: {
          content: never;
        };
      };
    };
  };
  "/auth/validate": {
    /**
     * Validate JWT token and return user information (internal endpoint)
     * @description Internal endpoint for other services to validate JWT tokens and extract user information.
     * This endpoint is used by other Wili services to authenticate requests.
     */
    post: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["ValidateTokenRequest"];
        };
      };
      responses: {
        /** @description Token is valid */
        200: {
          content: {
            "application/json": components["schemas"]["ValidateTokenResponse"];
          };
        };
        /** @description Invalid or expired token */
        401: {
          content: never;
        };
      };
    };
  };
  "/users/me": {
    /** Get the current authenticated user's profile */
    get: {
      responses: {
        /** @description The authenticated user's public profile */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Missing or invalid JWT */
        401: {
          content: never;
        };
      };
    };
    /** Update current authenticated user's profile fields */
    put: {
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpdateUserRequest"];
        };
      };
      responses: {
        /** @description Updated user profile */
        200: {
          content: {
            "application/json": components["schemas"]["User"];
          };
        };
        /** @description Invalid input */
        400: {
          content: never;
        };
        /** @description Missing or invalid JWT */
        401: {
          content: never;
        };
      };
    };
  };
  "/users/{userId}": {
    /** Get public profile of a user */
    get: {
      parameters: {
        path: {
          userId: string;
        };
      };
      responses: {
        /** @description Public profile */
        200: {
          content: {
            "application/json": components["schemas"]["PublicUserProfile"];
          };
        };
        /** @description User not found */
        404: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    YandexAuthRequest: {
      /** @description OAuth authorization code returned by Yandex after user consent. */
      code: string;
    };
    AuthResponse: {
      /** @description JWT access token */
      accessToken: string;
      /**
       * Format: int64
       * @description Token lifetime in seconds
       */
      expiresIn: number;
      user: components["schemas"]["User"];
    };
    User: {
      /** Format: uuid */
      id: string;
      displayName: string;
      /** Format: email */
      email?: string | null;
      /** Format: uri */
      avatarUrl?: string | null;
    };
    UpdateUserRequest: {
      displayName?: string;
      avatarUrl?: string;
    };
    ValidateTokenRequest: {
      /** @description JWT token to validate */
      token: string;
    };
    ValidateTokenResponse: {
      /** @description Whether the token is valid */
      valid: boolean;
      user: components["schemas"]["User"];
    };
    PublicUserProfile: components["schemas"]["User"];
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
