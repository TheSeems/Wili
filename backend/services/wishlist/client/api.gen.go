// Package wishlist_client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package wishlist_client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BookItemRequest defines model for BookItemRequest.
type BookItemRequest struct {
	// BookerName Optional name of the person booking the item. If not provided, booking will be anonymous.
	BookerName *string `json:"bookerName,omitempty"`

	// Message Optional message from the booker to the wishlist owner.
	Message *string `json:"message,omitempty"`
}

// ConflictErrorResponse defines model for ConflictErrorResponse.
type ConflictErrorResponse struct {
	// Error Error type
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`
}

// CreateWishlistItemRequest defines model for CreateWishlistItemRequest.
type CreateWishlistItemRequest struct {
	// Data Item-specific data payload. All items must have a name.
	// Description and other properties are optional to support different item types
	// (e.g., marketplace items with SKU, price, etc.).
	Data WishlistItemData `json:"data"`

	// Type Item type discriminator
	Type string `json:"type"`
}

// CreateWishlistRequest defines model for CreateWishlistRequest.
type CreateWishlistRequest struct {
	// Description Optional wishlist description
	Description *string `json:"description"`

	// Title Wishlist title
	Title string `json:"title"`
}

// ItemBooking defines model for ItemBooking.
type ItemBooking struct {
	// BookedAt When the item was booked
	BookedAt time.Time `json:"bookedAt"`

	// BookerName Name of the person who booked the item (null for anonymous bookings)
	BookerName *string `json:"bookerName"`

	// BookingId Unique identifier for this booking
	BookingId openapi_types.UUID `json:"bookingId"`

	// Message Optional message from the booker
	Message *string `json:"message"`
}

// UpdateWishlistItemRequest defines model for UpdateWishlistItemRequest.
type UpdateWishlistItemRequest struct {
	// Data Item-specific data payload. All items must have a name.
	// Description and other properties are optional to support different item types
	// (e.g., marketplace items with SKU, price, etc.).
	Data *WishlistItemData `json:"data,omitempty"`

	// Type Updated item type discriminator
	Type *string `json:"type,omitempty"`
}

// UpdateWishlistRequest defines model for UpdateWishlistRequest.
type UpdateWishlistRequest struct {
	// Description Updated wishlist description
	Description *string `json:"description"`

	// Title Updated wishlist title
	Title *string `json:"title,omitempty"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	// Field Name of the field that failed validation
	Field string `json:"field"`

	// Message Detailed error message for the field
	Message string `json:"message"`
}

// ValidationErrorResponse defines model for ValidationErrorResponse.
type ValidationErrorResponse struct {
	// Details Detailed validation errors
	Details []ValidationError `json:"details"`

	// Error General error message
	Error string `json:"error"`
}

// Wishlist defines model for Wishlist.
type Wishlist struct {
	CreatedAt   time.Time          `json:"createdAt"`
	Description *string            `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Items       []WishlistItem     `json:"items"`
	Title       string             `json:"title"`
	UpdatedAt   time.Time          `json:"updatedAt"`
	UserId      openapi_types.UUID `json:"userId"`
}

// WishlistItem defines model for WishlistItem.
type WishlistItem struct {
	Booking   *ItemBooking `json:"booking,omitempty"`
	CreatedAt *time.Time   `json:"createdAt,omitempty"`

	// Data Item-specific data payload. All items must have a name.
	// Description and other properties are optional to support different item types
	// (e.g., marketplace items with SKU, price, etc.).
	Data WishlistItemData   `json:"data"`
	Id   openapi_types.UUID `json:"id"`

	// Type Discriminator for item type (e.g., "text", "marketplace")
	Type      string     `json:"type"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// WishlistItemData Item-specific data payload. All items must have a name.
// Description and other properties are optional to support different item types
// (e.g., marketplace items with SKU, price, etc.).
type WishlistItemData struct {
	// Description Optional description of the wishlist item
	Description *string `json:"description,omitempty"`

	// Name Name of the wishlist item
	Name string `json:"name"`

	// Url Optional URL associated with the item
	Url                  *string                `json:"url,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DeleteWishlistsWishlistIdItemsItemIdUnbookParams defines parameters for DeleteWishlistsWishlistIdItemsItemIdUnbook.
type DeleteWishlistsWishlistIdItemsItemIdUnbookParams struct {
	// BookingId ID of the booking to unbook
	BookingId openapi_types.UUID `form:"bookingId" json:"bookingId"`
}

// PostWishlistsJSONRequestBody defines body for PostWishlists for application/json ContentType.
type PostWishlistsJSONRequestBody = CreateWishlistRequest

// PutWishlistsWishlistIdJSONRequestBody defines body for PutWishlistsWishlistId for application/json ContentType.
type PutWishlistsWishlistIdJSONRequestBody = UpdateWishlistRequest

// PostWishlistsWishlistIdItemsJSONRequestBody defines body for PostWishlistsWishlistIdItems for application/json ContentType.
type PostWishlistsWishlistIdItemsJSONRequestBody = CreateWishlistItemRequest

// PutWishlistsWishlistIdItemsItemIdJSONRequestBody defines body for PutWishlistsWishlistIdItemsItemId for application/json ContentType.
type PutWishlistsWishlistIdItemsItemIdJSONRequestBody = UpdateWishlistItemRequest

// PostWishlistsWishlistIdItemsItemIdBookJSONRequestBody defines body for PostWishlistsWishlistIdItemsItemIdBook for application/json ContentType.
type PostWishlistsWishlistIdItemsItemIdBookJSONRequestBody = BookItemRequest

// Getter for additional properties for WishlistItemData. Returns the specified
// element and whether it was found
func (a WishlistItemData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for WishlistItemData
func (a *WishlistItemData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for WishlistItemData to handle AdditionalProperties
func (a *WishlistItemData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
		delete(object, "description")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["url"]; found {
		err = json.Unmarshal(raw, &a.Url)
		if err != nil {
			return fmt.Errorf("error reading 'url': %w", err)
		}
		delete(object, "url")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for WishlistItemData to handle AdditionalProperties
func (a WishlistItemData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	if a.Url != nil {
		object["url"], err = json.Marshal(a.Url)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'url': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetWishlists request
	GetWishlists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWishlistsWithBody request with any body
	PostWishlistsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWishlists(ctx context.Context, body PostWishlistsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWishlistsWishlistId request
	DeleteWishlistsWishlistId(ctx context.Context, wishlistId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWishlistsWishlistId request
	GetWishlistsWishlistId(ctx context.Context, wishlistId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWishlistsWishlistIdWithBody request with any body
	PutWishlistsWishlistIdWithBody(ctx context.Context, wishlistId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutWishlistsWishlistId(ctx context.Context, wishlistId openapi_types.UUID, body PutWishlistsWishlistIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWishlistsWishlistIdItemsWithBody request with any body
	PostWishlistsWishlistIdItemsWithBody(ctx context.Context, wishlistId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWishlistsWishlistIdItems(ctx context.Context, wishlistId openapi_types.UUID, body PostWishlistsWishlistIdItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWishlistsWishlistIdItemsItemId request
	DeleteWishlistsWishlistIdItemsItemId(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutWishlistsWishlistIdItemsItemIdWithBody request with any body
	PutWishlistsWishlistIdItemsItemIdWithBody(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutWishlistsWishlistIdItemsItemId(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, body PutWishlistsWishlistIdItemsItemIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostWishlistsWishlistIdItemsItemIdBookWithBody request with any body
	PostWishlistsWishlistIdItemsItemIdBookWithBody(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostWishlistsWishlistIdItemsItemIdBook(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, body PostWishlistsWishlistIdItemsItemIdBookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteWishlistsWishlistIdItemsItemIdUnbook request
	DeleteWishlistsWishlistIdItemsItemIdUnbook(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, params *DeleteWishlistsWishlistIdItemsItemIdUnbookParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetWishlists(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWishlistsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWishlistsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWishlistsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWishlists(ctx context.Context, body PostWishlistsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWishlistsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWishlistsWishlistId(ctx context.Context, wishlistId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWishlistsWishlistIdRequest(c.Server, wishlistId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWishlistsWishlistId(ctx context.Context, wishlistId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWishlistsWishlistIdRequest(c.Server, wishlistId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWishlistsWishlistIdWithBody(ctx context.Context, wishlistId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWishlistsWishlistIdRequestWithBody(c.Server, wishlistId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWishlistsWishlistId(ctx context.Context, wishlistId openapi_types.UUID, body PutWishlistsWishlistIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWishlistsWishlistIdRequest(c.Server, wishlistId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWishlistsWishlistIdItemsWithBody(ctx context.Context, wishlistId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWishlistsWishlistIdItemsRequestWithBody(c.Server, wishlistId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWishlistsWishlistIdItems(ctx context.Context, wishlistId openapi_types.UUID, body PostWishlistsWishlistIdItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWishlistsWishlistIdItemsRequest(c.Server, wishlistId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWishlistsWishlistIdItemsItemId(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWishlistsWishlistIdItemsItemIdRequest(c.Server, wishlistId, itemId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWishlistsWishlistIdItemsItemIdWithBody(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWishlistsWishlistIdItemsItemIdRequestWithBody(c.Server, wishlistId, itemId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutWishlistsWishlistIdItemsItemId(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, body PutWishlistsWishlistIdItemsItemIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutWishlistsWishlistIdItemsItemIdRequest(c.Server, wishlistId, itemId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWishlistsWishlistIdItemsItemIdBookWithBody(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWishlistsWishlistIdItemsItemIdBookRequestWithBody(c.Server, wishlistId, itemId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostWishlistsWishlistIdItemsItemIdBook(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, body PostWishlistsWishlistIdItemsItemIdBookJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostWishlistsWishlistIdItemsItemIdBookRequest(c.Server, wishlistId, itemId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteWishlistsWishlistIdItemsItemIdUnbook(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, params *DeleteWishlistsWishlistIdItemsItemIdUnbookParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteWishlistsWishlistIdItemsItemIdUnbookRequest(c.Server, wishlistId, itemId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetWishlistsRequest generates requests for GetWishlists
func NewGetWishlistsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishlists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostWishlistsRequest calls the generic PostWishlists builder with application/json body
func NewPostWishlistsRequest(server string, body PostWishlistsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWishlistsRequestWithBody(server, "application/json", bodyReader)
}

// NewPostWishlistsRequestWithBody generates requests for PostWishlists with any type of body
func NewPostWishlistsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishlists")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWishlistsWishlistIdRequest generates requests for DeleteWishlistsWishlistId
func NewDeleteWishlistsWishlistIdRequest(server string, wishlistId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "wishlistId", runtime.ParamLocationPath, wishlistId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishlists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetWishlistsWishlistIdRequest generates requests for GetWishlistsWishlistId
func NewGetWishlistsWishlistIdRequest(server string, wishlistId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "wishlistId", runtime.ParamLocationPath, wishlistId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishlists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutWishlistsWishlistIdRequest calls the generic PutWishlistsWishlistId builder with application/json body
func NewPutWishlistsWishlistIdRequest(server string, wishlistId openapi_types.UUID, body PutWishlistsWishlistIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutWishlistsWishlistIdRequestWithBody(server, wishlistId, "application/json", bodyReader)
}

// NewPutWishlistsWishlistIdRequestWithBody generates requests for PutWishlistsWishlistId with any type of body
func NewPutWishlistsWishlistIdRequestWithBody(server string, wishlistId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "wishlistId", runtime.ParamLocationPath, wishlistId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishlists/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostWishlistsWishlistIdItemsRequest calls the generic PostWishlistsWishlistIdItems builder with application/json body
func NewPostWishlistsWishlistIdItemsRequest(server string, wishlistId openapi_types.UUID, body PostWishlistsWishlistIdItemsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWishlistsWishlistIdItemsRequestWithBody(server, wishlistId, "application/json", bodyReader)
}

// NewPostWishlistsWishlistIdItemsRequestWithBody generates requests for PostWishlistsWishlistIdItems with any type of body
func NewPostWishlistsWishlistIdItemsRequestWithBody(server string, wishlistId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "wishlistId", runtime.ParamLocationPath, wishlistId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishlists/%s/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWishlistsWishlistIdItemsItemIdRequest generates requests for DeleteWishlistsWishlistIdItemsItemId
func NewDeleteWishlistsWishlistIdItemsItemIdRequest(server string, wishlistId openapi_types.UUID, itemId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "wishlistId", runtime.ParamLocationPath, wishlistId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "itemId", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishlists/%s/items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutWishlistsWishlistIdItemsItemIdRequest calls the generic PutWishlistsWishlistIdItemsItemId builder with application/json body
func NewPutWishlistsWishlistIdItemsItemIdRequest(server string, wishlistId openapi_types.UUID, itemId openapi_types.UUID, body PutWishlistsWishlistIdItemsItemIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutWishlistsWishlistIdItemsItemIdRequestWithBody(server, wishlistId, itemId, "application/json", bodyReader)
}

// NewPutWishlistsWishlistIdItemsItemIdRequestWithBody generates requests for PutWishlistsWishlistIdItemsItemId with any type of body
func NewPutWishlistsWishlistIdItemsItemIdRequestWithBody(server string, wishlistId openapi_types.UUID, itemId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "wishlistId", runtime.ParamLocationPath, wishlistId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "itemId", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishlists/%s/items/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostWishlistsWishlistIdItemsItemIdBookRequest calls the generic PostWishlistsWishlistIdItemsItemIdBook builder with application/json body
func NewPostWishlistsWishlistIdItemsItemIdBookRequest(server string, wishlistId openapi_types.UUID, itemId openapi_types.UUID, body PostWishlistsWishlistIdItemsItemIdBookJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostWishlistsWishlistIdItemsItemIdBookRequestWithBody(server, wishlistId, itemId, "application/json", bodyReader)
}

// NewPostWishlistsWishlistIdItemsItemIdBookRequestWithBody generates requests for PostWishlistsWishlistIdItemsItemIdBook with any type of body
func NewPostWishlistsWishlistIdItemsItemIdBookRequestWithBody(server string, wishlistId openapi_types.UUID, itemId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "wishlistId", runtime.ParamLocationPath, wishlistId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "itemId", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishlists/%s/items/%s/book", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteWishlistsWishlistIdItemsItemIdUnbookRequest generates requests for DeleteWishlistsWishlistIdItemsItemIdUnbook
func NewDeleteWishlistsWishlistIdItemsItemIdUnbookRequest(server string, wishlistId openapi_types.UUID, itemId openapi_types.UUID, params *DeleteWishlistsWishlistIdItemsItemIdUnbookParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "wishlistId", runtime.ParamLocationPath, wishlistId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "itemId", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/wishlists/%s/items/%s/unbook", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "bookingId", runtime.ParamLocationQuery, params.BookingId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetWishlistsWithResponse request
	GetWishlistsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWishlistsResponse, error)

	// PostWishlistsWithBodyWithResponse request with any body
	PostWishlistsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWishlistsResponse, error)

	PostWishlistsWithResponse(ctx context.Context, body PostWishlistsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWishlistsResponse, error)

	// DeleteWishlistsWishlistIdWithResponse request
	DeleteWishlistsWishlistIdWithResponse(ctx context.Context, wishlistId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteWishlistsWishlistIdResponse, error)

	// GetWishlistsWishlistIdWithResponse request
	GetWishlistsWishlistIdWithResponse(ctx context.Context, wishlistId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetWishlistsWishlistIdResponse, error)

	// PutWishlistsWishlistIdWithBodyWithResponse request with any body
	PutWishlistsWishlistIdWithBodyWithResponse(ctx context.Context, wishlistId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWishlistsWishlistIdResponse, error)

	PutWishlistsWishlistIdWithResponse(ctx context.Context, wishlistId openapi_types.UUID, body PutWishlistsWishlistIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWishlistsWishlistIdResponse, error)

	// PostWishlistsWishlistIdItemsWithBodyWithResponse request with any body
	PostWishlistsWishlistIdItemsWithBodyWithResponse(ctx context.Context, wishlistId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWishlistsWishlistIdItemsResponse, error)

	PostWishlistsWishlistIdItemsWithResponse(ctx context.Context, wishlistId openapi_types.UUID, body PostWishlistsWishlistIdItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWishlistsWishlistIdItemsResponse, error)

	// DeleteWishlistsWishlistIdItemsItemIdWithResponse request
	DeleteWishlistsWishlistIdItemsItemIdWithResponse(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteWishlistsWishlistIdItemsItemIdResponse, error)

	// PutWishlistsWishlistIdItemsItemIdWithBodyWithResponse request with any body
	PutWishlistsWishlistIdItemsItemIdWithBodyWithResponse(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWishlistsWishlistIdItemsItemIdResponse, error)

	PutWishlistsWishlistIdItemsItemIdWithResponse(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, body PutWishlistsWishlistIdItemsItemIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWishlistsWishlistIdItemsItemIdResponse, error)

	// PostWishlistsWishlistIdItemsItemIdBookWithBodyWithResponse request with any body
	PostWishlistsWishlistIdItemsItemIdBookWithBodyWithResponse(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWishlistsWishlistIdItemsItemIdBookResponse, error)

	PostWishlistsWishlistIdItemsItemIdBookWithResponse(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, body PostWishlistsWishlistIdItemsItemIdBookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWishlistsWishlistIdItemsItemIdBookResponse, error)

	// DeleteWishlistsWishlistIdItemsItemIdUnbookWithResponse request
	DeleteWishlistsWishlistIdItemsItemIdUnbookWithResponse(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, params *DeleteWishlistsWishlistIdItemsItemIdUnbookParams, reqEditors ...RequestEditorFn) (*DeleteWishlistsWishlistIdItemsItemIdUnbookResponse, error)
}

type GetWishlistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Wishlist
}

// Status returns HTTPResponse.Status
func (r GetWishlistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWishlistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWishlistsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Wishlist
	JSON400      *ValidationErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostWishlistsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWishlistsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWishlistsWishlistIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWishlistsWishlistIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWishlistsWishlistIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWishlistsWishlistIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Wishlist
}

// Status returns HTTPResponse.Status
func (r GetWishlistsWishlistIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWishlistsWishlistIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWishlistsWishlistIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Wishlist
	JSON400      *ValidationErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutWishlistsWishlistIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWishlistsWishlistIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWishlistsWishlistIdItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *WishlistItem
	JSON400      *ValidationErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostWishlistsWishlistIdItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWishlistsWishlistIdItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWishlistsWishlistIdItemsItemIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWishlistsWishlistIdItemsItemIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWishlistsWishlistIdItemsItemIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutWishlistsWishlistIdItemsItemIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *WishlistItem
	JSON400      *ValidationErrorResponse
}

// Status returns HTTPResponse.Status
func (r PutWishlistsWishlistIdItemsItemIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutWishlistsWishlistIdItemsItemIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostWishlistsWishlistIdItemsItemIdBookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ItemBooking
	JSON400      *ValidationErrorResponse
	JSON409      *ConflictErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostWishlistsWishlistIdItemsItemIdBookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostWishlistsWishlistIdItemsItemIdBookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteWishlistsWishlistIdItemsItemIdUnbookResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteWishlistsWishlistIdItemsItemIdUnbookResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteWishlistsWishlistIdItemsItemIdUnbookResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetWishlistsWithResponse request returning *GetWishlistsResponse
func (c *ClientWithResponses) GetWishlistsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWishlistsResponse, error) {
	rsp, err := c.GetWishlists(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWishlistsResponse(rsp)
}

// PostWishlistsWithBodyWithResponse request with arbitrary body returning *PostWishlistsResponse
func (c *ClientWithResponses) PostWishlistsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWishlistsResponse, error) {
	rsp, err := c.PostWishlistsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWishlistsResponse(rsp)
}

func (c *ClientWithResponses) PostWishlistsWithResponse(ctx context.Context, body PostWishlistsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWishlistsResponse, error) {
	rsp, err := c.PostWishlists(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWishlistsResponse(rsp)
}

// DeleteWishlistsWishlistIdWithResponse request returning *DeleteWishlistsWishlistIdResponse
func (c *ClientWithResponses) DeleteWishlistsWishlistIdWithResponse(ctx context.Context, wishlistId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteWishlistsWishlistIdResponse, error) {
	rsp, err := c.DeleteWishlistsWishlistId(ctx, wishlistId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWishlistsWishlistIdResponse(rsp)
}

// GetWishlistsWishlistIdWithResponse request returning *GetWishlistsWishlistIdResponse
func (c *ClientWithResponses) GetWishlistsWishlistIdWithResponse(ctx context.Context, wishlistId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetWishlistsWishlistIdResponse, error) {
	rsp, err := c.GetWishlistsWishlistId(ctx, wishlistId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWishlistsWishlistIdResponse(rsp)
}

// PutWishlistsWishlistIdWithBodyWithResponse request with arbitrary body returning *PutWishlistsWishlistIdResponse
func (c *ClientWithResponses) PutWishlistsWishlistIdWithBodyWithResponse(ctx context.Context, wishlistId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWishlistsWishlistIdResponse, error) {
	rsp, err := c.PutWishlistsWishlistIdWithBody(ctx, wishlistId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWishlistsWishlistIdResponse(rsp)
}

func (c *ClientWithResponses) PutWishlistsWishlistIdWithResponse(ctx context.Context, wishlistId openapi_types.UUID, body PutWishlistsWishlistIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWishlistsWishlistIdResponse, error) {
	rsp, err := c.PutWishlistsWishlistId(ctx, wishlistId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWishlistsWishlistIdResponse(rsp)
}

// PostWishlistsWishlistIdItemsWithBodyWithResponse request with arbitrary body returning *PostWishlistsWishlistIdItemsResponse
func (c *ClientWithResponses) PostWishlistsWishlistIdItemsWithBodyWithResponse(ctx context.Context, wishlistId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWishlistsWishlistIdItemsResponse, error) {
	rsp, err := c.PostWishlistsWishlistIdItemsWithBody(ctx, wishlistId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWishlistsWishlistIdItemsResponse(rsp)
}

func (c *ClientWithResponses) PostWishlistsWishlistIdItemsWithResponse(ctx context.Context, wishlistId openapi_types.UUID, body PostWishlistsWishlistIdItemsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWishlistsWishlistIdItemsResponse, error) {
	rsp, err := c.PostWishlistsWishlistIdItems(ctx, wishlistId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWishlistsWishlistIdItemsResponse(rsp)
}

// DeleteWishlistsWishlistIdItemsItemIdWithResponse request returning *DeleteWishlistsWishlistIdItemsItemIdResponse
func (c *ClientWithResponses) DeleteWishlistsWishlistIdItemsItemIdWithResponse(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteWishlistsWishlistIdItemsItemIdResponse, error) {
	rsp, err := c.DeleteWishlistsWishlistIdItemsItemId(ctx, wishlistId, itemId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWishlistsWishlistIdItemsItemIdResponse(rsp)
}

// PutWishlistsWishlistIdItemsItemIdWithBodyWithResponse request with arbitrary body returning *PutWishlistsWishlistIdItemsItemIdResponse
func (c *ClientWithResponses) PutWishlistsWishlistIdItemsItemIdWithBodyWithResponse(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutWishlistsWishlistIdItemsItemIdResponse, error) {
	rsp, err := c.PutWishlistsWishlistIdItemsItemIdWithBody(ctx, wishlistId, itemId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWishlistsWishlistIdItemsItemIdResponse(rsp)
}

func (c *ClientWithResponses) PutWishlistsWishlistIdItemsItemIdWithResponse(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, body PutWishlistsWishlistIdItemsItemIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutWishlistsWishlistIdItemsItemIdResponse, error) {
	rsp, err := c.PutWishlistsWishlistIdItemsItemId(ctx, wishlistId, itemId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutWishlistsWishlistIdItemsItemIdResponse(rsp)
}

// PostWishlistsWishlistIdItemsItemIdBookWithBodyWithResponse request with arbitrary body returning *PostWishlistsWishlistIdItemsItemIdBookResponse
func (c *ClientWithResponses) PostWishlistsWishlistIdItemsItemIdBookWithBodyWithResponse(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostWishlistsWishlistIdItemsItemIdBookResponse, error) {
	rsp, err := c.PostWishlistsWishlistIdItemsItemIdBookWithBody(ctx, wishlistId, itemId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWishlistsWishlistIdItemsItemIdBookResponse(rsp)
}

func (c *ClientWithResponses) PostWishlistsWishlistIdItemsItemIdBookWithResponse(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, body PostWishlistsWishlistIdItemsItemIdBookJSONRequestBody, reqEditors ...RequestEditorFn) (*PostWishlistsWishlistIdItemsItemIdBookResponse, error) {
	rsp, err := c.PostWishlistsWishlistIdItemsItemIdBook(ctx, wishlistId, itemId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostWishlistsWishlistIdItemsItemIdBookResponse(rsp)
}

// DeleteWishlistsWishlistIdItemsItemIdUnbookWithResponse request returning *DeleteWishlistsWishlistIdItemsItemIdUnbookResponse
func (c *ClientWithResponses) DeleteWishlistsWishlistIdItemsItemIdUnbookWithResponse(ctx context.Context, wishlistId openapi_types.UUID, itemId openapi_types.UUID, params *DeleteWishlistsWishlistIdItemsItemIdUnbookParams, reqEditors ...RequestEditorFn) (*DeleteWishlistsWishlistIdItemsItemIdUnbookResponse, error) {
	rsp, err := c.DeleteWishlistsWishlistIdItemsItemIdUnbook(ctx, wishlistId, itemId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteWishlistsWishlistIdItemsItemIdUnbookResponse(rsp)
}

// ParseGetWishlistsResponse parses an HTTP response from a GetWishlistsWithResponse call
func ParseGetWishlistsResponse(rsp *http.Response) (*GetWishlistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWishlistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Wishlist
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostWishlistsResponse parses an HTTP response from a PostWishlistsWithResponse call
func ParsePostWishlistsResponse(rsp *http.Response) (*PostWishlistsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWishlistsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Wishlist
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ValidationErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteWishlistsWishlistIdResponse parses an HTTP response from a DeleteWishlistsWishlistIdWithResponse call
func ParseDeleteWishlistsWishlistIdResponse(rsp *http.Response) (*DeleteWishlistsWishlistIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWishlistsWishlistIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWishlistsWishlistIdResponse parses an HTTP response from a GetWishlistsWishlistIdWithResponse call
func ParseGetWishlistsWishlistIdResponse(rsp *http.Response) (*GetWishlistsWishlistIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWishlistsWishlistIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Wishlist
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutWishlistsWishlistIdResponse parses an HTTP response from a PutWishlistsWishlistIdWithResponse call
func ParsePutWishlistsWishlistIdResponse(rsp *http.Response) (*PutWishlistsWishlistIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutWishlistsWishlistIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Wishlist
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ValidationErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostWishlistsWishlistIdItemsResponse parses an HTTP response from a PostWishlistsWishlistIdItemsWithResponse call
func ParsePostWishlistsWishlistIdItemsResponse(rsp *http.Response) (*PostWishlistsWishlistIdItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWishlistsWishlistIdItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest WishlistItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ValidationErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseDeleteWishlistsWishlistIdItemsItemIdResponse parses an HTTP response from a DeleteWishlistsWishlistIdItemsItemIdWithResponse call
func ParseDeleteWishlistsWishlistIdItemsItemIdResponse(rsp *http.Response) (*DeleteWishlistsWishlistIdItemsItemIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWishlistsWishlistIdItemsItemIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutWishlistsWishlistIdItemsItemIdResponse parses an HTTP response from a PutWishlistsWishlistIdItemsItemIdWithResponse call
func ParsePutWishlistsWishlistIdItemsItemIdResponse(rsp *http.Response) (*PutWishlistsWishlistIdItemsItemIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutWishlistsWishlistIdItemsItemIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest WishlistItem
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ValidationErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostWishlistsWishlistIdItemsItemIdBookResponse parses an HTTP response from a PostWishlistsWishlistIdItemsItemIdBookWithResponse call
func ParsePostWishlistsWishlistIdItemsItemIdBookResponse(rsp *http.Response) (*PostWishlistsWishlistIdItemsItemIdBookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostWishlistsWishlistIdItemsItemIdBookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ItemBooking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ValidationErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest ConflictErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	}

	return response, nil
}

// ParseDeleteWishlistsWishlistIdItemsItemIdUnbookResponse parses an HTTP response from a DeleteWishlistsWishlistIdItemsItemIdUnbookWithResponse call
func ParseDeleteWishlistsWishlistIdItemsItemIdUnbookResponse(rsp *http.Response) (*DeleteWishlistsWishlistIdItemsItemIdUnbookResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteWishlistsWishlistIdItemsItemIdUnbookResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}
