// Package wishlist_server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package wishlist_server

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// BookItemRequest defines model for BookItemRequest.
type BookItemRequest struct {
	// BookerName Optional name of the person booking the item. If not provided, booking will be anonymous.
	BookerName *string `json:"bookerName,omitempty"`

	// Message Optional message from the booker to the wishlist owner.
	Message *string `json:"message,omitempty"`
}

// BookItemResponse defines model for BookItemResponse.
type BookItemResponse struct {
	// BookedAt When the item was booked
	BookedAt time.Time `json:"bookedAt"`

	// BookerName Name of the person who booked the item (null for anonymous bookings)
	BookerName *string `json:"bookerName"`

	// BookingId Unique identifier for this booking
	BookingId openapi_types.UUID `json:"bookingId"`

	// CancellationToken Secret token that allows the booker to cancel their booking. Store this securely!
	CancellationToken openapi_types.UUID `json:"cancellationToken"`

	// Message Optional message from the booker
	Message *string `json:"message"`
}

// ConflictErrorResponse defines model for ConflictErrorResponse.
type ConflictErrorResponse struct {
	// Error Error type
	Error string `json:"error"`

	// Message Detailed error message
	Message string `json:"message"`
}

// CreateWishlistItemRequest defines model for CreateWishlistItemRequest.
type CreateWishlistItemRequest struct {
	// Data Item-specific data payload. All items must have a name.
	// Description and other properties are optional to support different item types
	// (e.g., marketplace items with SKU, price, etc.).
	Data WishlistItemData `json:"data"`

	// Type Item type discriminator
	Type string `json:"type"`
}

// CreateWishlistRequest defines model for CreateWishlistRequest.
type CreateWishlistRequest struct {
	// Description Optional wishlist description
	Description *string `json:"description"`

	// Title Wishlist title
	Title string `json:"title"`
}

// ItemBooking defines model for ItemBooking.
type ItemBooking struct {
	// BookedAt When the item was booked
	BookedAt time.Time `json:"bookedAt"`

	// BookerName Name of the person who booked the item (null for anonymous bookings)
	BookerName *string `json:"bookerName"`

	// BookingId Unique identifier for this booking
	BookingId openapi_types.UUID `json:"bookingId"`

	// Message Optional message from the booker
	Message *string `json:"message"`
}

// UpdateWishlistItemRequest defines model for UpdateWishlistItemRequest.
type UpdateWishlistItemRequest struct {
	// Data Item-specific data payload. All items must have a name.
	// Description and other properties are optional to support different item types
	// (e.g., marketplace items with SKU, price, etc.).
	Data *WishlistItemData `json:"data,omitempty"`

	// Type Updated item type discriminator
	Type *string `json:"type,omitempty"`
}

// UpdateWishlistRequest defines model for UpdateWishlistRequest.
type UpdateWishlistRequest struct {
	// Description Updated wishlist description
	Description *string `json:"description"`

	// Title Updated wishlist title
	Title *string `json:"title,omitempty"`
}

// ValidationError defines model for ValidationError.
type ValidationError struct {
	// Field Name of the field that failed validation
	Field string `json:"field"`

	// Message Detailed error message for the field
	Message string `json:"message"`
}

// ValidationErrorResponse defines model for ValidationErrorResponse.
type ValidationErrorResponse struct {
	// Details Detailed validation errors
	Details []ValidationError `json:"details"`

	// Error General error message
	Error string `json:"error"`
}

// Wishlist defines model for Wishlist.
type Wishlist struct {
	CreatedAt   time.Time          `json:"createdAt"`
	Description *string            `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Items       []WishlistItem     `json:"items"`
	Title       string             `json:"title"`
	UpdatedAt   time.Time          `json:"updatedAt"`
	UserId      openapi_types.UUID `json:"userId"`
}

// WishlistItem defines model for WishlistItem.
type WishlistItem struct {
	Booking   *ItemBooking `json:"booking,omitempty"`
	CreatedAt *time.Time   `json:"createdAt,omitempty"`

	// Data Item-specific data payload. All items must have a name.
	// Description and other properties are optional to support different item types
	// (e.g., marketplace items with SKU, price, etc.).
	Data WishlistItemData   `json:"data"`
	Id   openapi_types.UUID `json:"id"`

	// Type Discriminator for item type (e.g., "text", "marketplace")
	Type      string     `json:"type"`
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// WishlistItemData Item-specific data payload. All items must have a name.
// Description and other properties are optional to support different item types
// (e.g., marketplace items with SKU, price, etc.).
type WishlistItemData struct {
	// Description Optional description of the wishlist item
	Description *string `json:"description,omitempty"`

	// Name Name of the wishlist item
	Name string `json:"name"`

	// Url Optional URL associated with the item
	Url                  *string                `json:"url,omitempty"`
	AdditionalProperties map[string]interface{} `json:"-"`
}

// DeleteWishlistsWishlistIdItemsItemIdUnbookParams defines parameters for DeleteWishlistsWishlistIdItemsItemIdUnbook.
type DeleteWishlistsWishlistIdItemsItemIdUnbookParams struct {
	// BookingId ID of the booking to unbook (for wishlist owner)
	BookingId *openapi_types.UUID `form:"bookingId,omitempty" json:"bookingId,omitempty"`

	// CancellationToken Cancellation token received when booking (for booker)
	CancellationToken *openapi_types.UUID `form:"cancellationToken,omitempty" json:"cancellationToken,omitempty"`
}

// PostWishlistsJSONRequestBody defines body for PostWishlists for application/json ContentType.
type PostWishlistsJSONRequestBody = CreateWishlistRequest

// PutWishlistsWishlistIdJSONRequestBody defines body for PutWishlistsWishlistId for application/json ContentType.
type PutWishlistsWishlistIdJSONRequestBody = UpdateWishlistRequest

// PostWishlistsWishlistIdItemsJSONRequestBody defines body for PostWishlistsWishlistIdItems for application/json ContentType.
type PostWishlistsWishlistIdItemsJSONRequestBody = CreateWishlistItemRequest

// PutWishlistsWishlistIdItemsItemIdJSONRequestBody defines body for PutWishlistsWishlistIdItemsItemId for application/json ContentType.
type PutWishlistsWishlistIdItemsItemIdJSONRequestBody = UpdateWishlistItemRequest

// PostWishlistsWishlistIdItemsItemIdBookJSONRequestBody defines body for PostWishlistsWishlistIdItemsItemIdBook for application/json ContentType.
type PostWishlistsWishlistIdItemsItemIdBookJSONRequestBody = BookItemRequest

// Getter for additional properties for WishlistItemData. Returns the specified
// element and whether it was found
func (a WishlistItemData) Get(fieldName string) (value interface{}, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for WishlistItemData
func (a *WishlistItemData) Set(fieldName string, value interface{}) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]interface{})
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for WishlistItemData to handle AdditionalProperties
func (a *WishlistItemData) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["description"]; found {
		err = json.Unmarshal(raw, &a.Description)
		if err != nil {
			return fmt.Errorf("error reading 'description': %w", err)
		}
		delete(object, "description")
	}

	if raw, found := object["name"]; found {
		err = json.Unmarshal(raw, &a.Name)
		if err != nil {
			return fmt.Errorf("error reading 'name': %w", err)
		}
		delete(object, "name")
	}

	if raw, found := object["url"]; found {
		err = json.Unmarshal(raw, &a.Url)
		if err != nil {
			return fmt.Errorf("error reading 'url': %w", err)
		}
		delete(object, "url")
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]interface{})
		for fieldName, fieldBuf := range object {
			var fieldVal interface{}
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for WishlistItemData to handle AdditionalProperties
func (a WishlistItemData) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	if a.Description != nil {
		object["description"], err = json.Marshal(a.Description)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'description': %w", err)
		}
	}

	object["name"], err = json.Marshal(a.Name)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'name': %w", err)
	}

	if a.Url != nil {
		object["url"], err = json.Marshal(a.Url)
		if err != nil {
			return nil, fmt.Errorf("error marshaling 'url': %w", err)
		}
	}

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List wishlists of the authenticated user
	// (GET /wishlists)
	GetWishlists(w http.ResponseWriter, r *http.Request)
	// Create a new wishlist for the authenticated user
	// (POST /wishlists)
	PostWishlists(w http.ResponseWriter, r *http.Request)
	// Delete a wishlist (owner only)
	// (DELETE /wishlists/{wishlistId})
	DeleteWishlistsWishlistId(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID)
	// Get a wishlist by ID (public endpoint)
	// (GET /wishlists/{wishlistId})
	GetWishlistsWishlistId(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID)
	// Update a wishlist (owner only)
	// (PUT /wishlists/{wishlistId})
	PutWishlistsWishlistId(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID)
	// Add an item to a wishlist (owner only)
	// (POST /wishlists/{wishlistId}/items)
	PostWishlistsWishlistIdItems(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID)
	// Remove an item from a wishlist (owner only)
	// (DELETE /wishlists/{wishlistId}/items/{itemId})
	DeleteWishlistsWishlistIdItemsItemId(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID, itemId openapi_types.UUID)
	// Update a wishlist item (owner only)
	// (PUT /wishlists/{wishlistId}/items/{itemId})
	PutWishlistsWishlistIdItemsItemId(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID, itemId openapi_types.UUID)
	// Book a wishlist item (public endpoint)
	// (POST /wishlists/{wishlistId}/items/{itemId}/book)
	PostWishlistsWishlistIdItemsItemIdBook(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID, itemId openapi_types.UUID)
	// Unbook a wishlist item
	// (DELETE /wishlists/{wishlistId}/items/{itemId}/unbook)
	DeleteWishlistsWishlistIdItemsItemIdUnbook(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID, itemId openapi_types.UUID, params DeleteWishlistsWishlistIdItemsItemIdUnbookParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// List wishlists of the authenticated user
// (GET /wishlists)
func (_ Unimplemented) GetWishlists(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create a new wishlist for the authenticated user
// (POST /wishlists)
func (_ Unimplemented) PostWishlists(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete a wishlist (owner only)
// (DELETE /wishlists/{wishlistId})
func (_ Unimplemented) DeleteWishlistsWishlistId(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a wishlist by ID (public endpoint)
// (GET /wishlists/{wishlistId})
func (_ Unimplemented) GetWishlistsWishlistId(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a wishlist (owner only)
// (PUT /wishlists/{wishlistId})
func (_ Unimplemented) PutWishlistsWishlistId(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Add an item to a wishlist (owner only)
// (POST /wishlists/{wishlistId}/items)
func (_ Unimplemented) PostWishlistsWishlistIdItems(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Remove an item from a wishlist (owner only)
// (DELETE /wishlists/{wishlistId}/items/{itemId})
func (_ Unimplemented) DeleteWishlistsWishlistIdItemsItemId(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID, itemId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a wishlist item (owner only)
// (PUT /wishlists/{wishlistId}/items/{itemId})
func (_ Unimplemented) PutWishlistsWishlistIdItemsItemId(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID, itemId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Book a wishlist item (public endpoint)
// (POST /wishlists/{wishlistId}/items/{itemId}/book)
func (_ Unimplemented) PostWishlistsWishlistIdItemsItemIdBook(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID, itemId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unbook a wishlist item
// (DELETE /wishlists/{wishlistId}/items/{itemId}/unbook)
func (_ Unimplemented) DeleteWishlistsWishlistIdItemsItemIdUnbook(w http.ResponseWriter, r *http.Request, wishlistId openapi_types.UUID, itemId openapi_types.UUID, params DeleteWishlistsWishlistIdItemsItemIdUnbookParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetWishlists operation middleware
func (siw *ServerInterfaceWrapper) GetWishlists(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWishlists(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostWishlists operation middleware
func (siw *ServerInterfaceWrapper) PostWishlists(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostWishlists(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteWishlistsWishlistId operation middleware
func (siw *ServerInterfaceWrapper) DeleteWishlistsWishlistId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "wishlistId" -------------
	var wishlistId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "wishlistId", chi.URLParam(r, "wishlistId"), &wishlistId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "wishlistId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWishlistsWishlistId(w, r, wishlistId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetWishlistsWishlistId operation middleware
func (siw *ServerInterfaceWrapper) GetWishlistsWishlistId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "wishlistId" -------------
	var wishlistId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "wishlistId", chi.URLParam(r, "wishlistId"), &wishlistId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "wishlistId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetWishlistsWishlistId(w, r, wishlistId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutWishlistsWishlistId operation middleware
func (siw *ServerInterfaceWrapper) PutWishlistsWishlistId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "wishlistId" -------------
	var wishlistId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "wishlistId", chi.URLParam(r, "wishlistId"), &wishlistId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "wishlistId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutWishlistsWishlistId(w, r, wishlistId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostWishlistsWishlistIdItems operation middleware
func (siw *ServerInterfaceWrapper) PostWishlistsWishlistIdItems(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "wishlistId" -------------
	var wishlistId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "wishlistId", chi.URLParam(r, "wishlistId"), &wishlistId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "wishlistId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostWishlistsWishlistIdItems(w, r, wishlistId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteWishlistsWishlistIdItemsItemId operation middleware
func (siw *ServerInterfaceWrapper) DeleteWishlistsWishlistIdItemsItemId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "wishlistId" -------------
	var wishlistId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "wishlistId", chi.URLParam(r, "wishlistId"), &wishlistId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "wishlistId", Err: err})
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWishlistsWishlistIdItemsItemId(w, r, wishlistId, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutWishlistsWishlistIdItemsItemId operation middleware
func (siw *ServerInterfaceWrapper) PutWishlistsWishlistIdItemsItemId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "wishlistId" -------------
	var wishlistId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "wishlistId", chi.URLParam(r, "wishlistId"), &wishlistId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "wishlistId", Err: err})
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutWishlistsWishlistIdItemsItemId(w, r, wishlistId, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostWishlistsWishlistIdItemsItemIdBook operation middleware
func (siw *ServerInterfaceWrapper) PostWishlistsWishlistIdItemsItemIdBook(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "wishlistId" -------------
	var wishlistId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "wishlistId", chi.URLParam(r, "wishlistId"), &wishlistId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "wishlistId", Err: err})
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostWishlistsWishlistIdItemsItemIdBook(w, r, wishlistId, itemId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteWishlistsWishlistIdItemsItemIdUnbook operation middleware
func (siw *ServerInterfaceWrapper) DeleteWishlistsWishlistIdItemsItemIdUnbook(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "wishlistId" -------------
	var wishlistId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "wishlistId", chi.URLParam(r, "wishlistId"), &wishlistId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "wishlistId", Err: err})
		return
	}

	// ------------- Path parameter "itemId" -------------
	var itemId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "itemId", chi.URLParam(r, "itemId"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "itemId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params DeleteWishlistsWishlistIdItemsItemIdUnbookParams

	// ------------- Optional query parameter "bookingId" -------------

	err = runtime.BindQueryParameter("form", true, false, "bookingId", r.URL.Query(), &params.BookingId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bookingId", Err: err})
		return
	}

	// ------------- Optional query parameter "cancellationToken" -------------

	err = runtime.BindQueryParameter("form", true, false, "cancellationToken", r.URL.Query(), &params.CancellationToken)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cancellationToken", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteWishlistsWishlistIdItemsItemIdUnbook(w, r, wishlistId, itemId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/wishlists", wrapper.GetWishlists)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/wishlists", wrapper.PostWishlists)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/wishlists/{wishlistId}", wrapper.DeleteWishlistsWishlistId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/wishlists/{wishlistId}", wrapper.GetWishlistsWishlistId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/wishlists/{wishlistId}", wrapper.PutWishlistsWishlistId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/wishlists/{wishlistId}/items", wrapper.PostWishlistsWishlistIdItems)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/wishlists/{wishlistId}/items/{itemId}", wrapper.DeleteWishlistsWishlistIdItemsItemId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/wishlists/{wishlistId}/items/{itemId}", wrapper.PutWishlistsWishlistIdItemsItemId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/wishlists/{wishlistId}/items/{itemId}/book", wrapper.PostWishlistsWishlistIdItemsItemIdBook)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/wishlists/{wishlistId}/items/{itemId}/unbook", wrapper.DeleteWishlistsWishlistIdItemsItemIdUnbook)
	})

	return r
}
